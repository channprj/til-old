<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CHANN World</title><link href="http://git.chann.kr/" rel="alternate"></link><link href="http://git.chann.kr/feeds/all.atom.xml" rel="self"></link><id>http://git.chann.kr/</id><updated>2015-12-25T00:00:00+09:00</updated><entry><title>About</title><link href="http://git.chann.kr/about/about" rel="alternate"></link><updated>2015-12-25T00:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:git.chann.kr,2015-12-25:about/about</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;조만간 이 곳으로 블로그를 옮길까 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;안녕하세요. CHANN 입니다.&lt;/p&gt;
&lt;p&gt;대학교에서는 컴퓨터정보와 뇌 및 인지과학을 전공하였습니다.
HCI, 디자인, UX, IoT 등 관심을 두는 분야가 많지만 이 중 제대로 아는 건 하나도 없습니다.&lt;/p&gt;
&lt;p&gt;블로그를 시작하게 된 계기 가 궁금하시다면 이 글을 읽어주세요.&lt;/p&gt;
&lt;p&gt;게시물은 되도록 링크 공유나 인용을 해주시면 감사하겠습니다.
전문을 그대로 재배포하지는 말아주세요.&lt;/p&gt;
&lt;p&gt;이 블로그는 Python Pelican 3.6.4을 사용하여 Github Pages에 올려서 운영하고 있습니다.&lt;/p&gt;
&lt;p&gt;Travis-ci와 연동하여 &lt;a href="https://github.com/channprj/channprj.github.io-source"&gt;Github 저장소&lt;/a&gt;에 푸시가 되면 &lt;a href="https://github.com/channprj/channprj.github.io"&gt;Github  Pages&lt;/a&gt;에 자동으로 빌드하고 푸시합니다.&lt;/p&gt;</summary><category term="about"></category><category term="pelican"></category><category term="github"></category><category term="github pages"></category><category term="introduction"></category><category term="miscellany"></category></entry><entry><title>django 정적 페이지 만드는 법</title><link href="http://git.chann.kr/dev/django-static-page-guide" rel="alternate"></link><updated>2015-12-10T20:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:git.chann.kr,2015-12-10:dev/django-static-page-guide</id><summary type="html">&lt;!--Summary: --&gt;

&lt;blockquote&gt;
&lt;p&gt;작성중입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;django에서 정적 페이지를 만들 땐 아래의 문서를 참조하자.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/ref/contrib/flatpages/"&gt;django 1.9 버전 공식 문서&lt;/a&gt;&lt;/p&gt;</summary><category term="dev"></category><category term="python"></category><category term="django"></category><category term="server"></category></entry><entry><title>ghost 블로그 설치하기</title><link href="http://git.chann.kr/dev/ghost-blog-install-guide" rel="alternate"></link><updated>2015-12-10T20:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:git.chann.kr,2015-12-10:dev/ghost-blog-install-guide</id><summary type="html">&lt;!--Summary: --&gt;

&lt;blockquote&gt;
&lt;p&gt;==작성중인 문서입니다.==&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;Ghost는 정말 블로그를 위한 도구다. 마크다운&lt;sup id="fnref:n"&gt;&lt;a class="footnote-ref" href="#fn:n" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; 기반의 에디터가 기본이며, 별다른 기능이 없다. 그래서 가볍고 빠르다. 마크다운 에디터라서 글 쓰는 속도 또한 빠르고 편리하다. 아직 0.7.x 버전&lt;sup id="fnref:n"&gt;&lt;a class="footnote-ref" href="#fn:n" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;이라 완성되었다고 보긴 힘들지만, 당장 사용하기에 전혀 무리가 없다. Ghost는 워드프레스가 점점 기능이 많아지면서 무겁고 사용하기 어려워진 것에 반해 오로지 블로그만을 위해 태어났고, 제 역할에만 충실하여 매우 마음에 든다.&lt;/p&gt;
&lt;p&gt;Ghost 블로그를 사용하는 방법은 워드프레스와 마찬가지로 2가지이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://ghost.org"&gt;Ghost&lt;/a&gt; 호스팅을 이용하는 방법(유료)&lt;/li&gt;
&lt;li&gt;직접 서버를 구축해서 설치하여 사용하는 법(사실상 유료)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1번의 경우에는 편리하지만 자유도가 떨어진다. 워드프레스닷컴과 마찬가지로 제공하는 기능만 사용 가능하다는 단점이 있다. 하지만 업데이트가 가장 빠르고, 안정적이다. 사용하려면 &lt;a href="http://ghost.org"&gt;Ghost&lt;/a&gt; 홈페이지에 접속해서 회원가입해서 사용하면 된다.&lt;/p&gt;
&lt;p&gt;2번의 경우에는 서버를 직접 운영해야 하고 생소할 수 있는 &lt;code&gt;node.js&lt;/code&gt;를 사용하여 직접 설치해야 하기 때문에 번거롭다. 대신 자유롭게 수정 가능하다는 장점이 있다. 직접 만들기 귀찮으면 1번, 아니면 2번을 고르자.&lt;/p&gt;
&lt;p&gt;사실 직접 써 보기 전까진 모르니까 서버에 설치하기 전에 미리 체험을 해 보는 것을 추천한다. 14일 무료체험을 해볼 수 있으니 지금 한번 써보자. 그마저도 귀찮다면 &lt;a href="http://ghosditor.herokuapp.com"&gt;Ghost 에디터만 사용해보자.&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;서버 준비&lt;/h2&gt;
&lt;p&gt;직접 만들기 위해서는 당연히 서버가 있어야 한다. 서버를 구입하거나, 월정액으로 빌려 쓰거나, 자신의 PC를 서버화하거나, Github Page를 이용하는 방법이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AWS, Digital Ocean, Vultr와 같은 가상화 서버를 사용 (시간제 요금, $5 ~)&lt;/li&gt;
&lt;li&gt;라즈베리파이2, 오드로이드, 인텔 에디슨과 같은 SBC&lt;sup id="fnref:n"&gt;&lt;a class="footnote-ref" href="#fn:n" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; 구매 (구입비 $30)&lt;/li&gt;
&lt;li&gt;자신의 PC&lt;/li&gt;
&lt;li&gt;Github Pages 기능을 우회해서 구현&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 글에서 중심적으로 다룰 내용은 1번의 가상화 서버를 활용하는 방법이지만 사실 2, 3번도 크게 상이하진 않다. 운영체제를 설치하고 네트워크를 설정한 이후에는 거의 동일한 과정이라고 볼 수 있다. 4번의 경우엔 무료인 대신 많이 복잡하다. Github Pages 기능은 기본적으로 &lt;code&gt;Ruby&lt;/code&gt; 기반의 페이지라서 Ghost의 &lt;code&gt;node.js&lt;/code&gt;를 사용할 수가 없기에 자신의 PC 혹은 노트북에 로컬 서버환경울 구축하고 Ghost를 설치한 후 &lt;a href="https://github.com/axitkhurana/buster"&gt;Buster&lt;/a&gt;라는 정적 페이지 생성기를 사용하여 자신의 Github Pages 저장소에 커밋해야 한다. 4번의 경우 나중에 따로 다룰 예정.&lt;/p&gt;
&lt;p&gt;우선, 서버를 사자. Cafe24나 스마일서브 같은 국내 가상화서버 혹은 AWS가 가장 좋긴 한데 비싸다. Digital Ocean도 물론 좋지만, 일본지역 서버가 없다. Linode는 일본지역 서버가 있는데 자리가 모두 나가서 새로 서버를 생성할 수가 없다. ~~그러니 Vultr를 사용하도록 하자.~~ ==(2015-12-10) AWS 서버로 이전함.==&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Linuxbrew  설치&lt;/h2&gt;
&lt;p&gt;먼저, ruby 기반 통합 패키지 도구인 &lt;code&gt;Homebrew&lt;/code&gt;를 설치하자. 맥에서 주로 쓰이는 도구이지만, 리눅스에서도 사용하기 유용하다. apt-get에 비해 패키지 버전이 빠르다. 그러나 서버 전역에서 쓰이는 패키지라면 apt-get으로 설치하는 것이 좀 더 바람직하다. &lt;code&gt;Homebrew&lt;/code&gt;는 루트 권한으로 패키지 설치가 안 되기 때문. 리눅스에서는 &lt;code&gt;Linuxbrew&lt;/code&gt; 라는 별칭으로 불린다.&lt;/p&gt;
&lt;p&gt;ruby 기반이기 때문에 서버에 당연히 ruby가 설치되어 있어야 한다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;AWS를 이용할 경우&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;우분투 저장소 업데이트는 해당되는 사람만 진행하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AWS에서 제공하는 패키지 저장소 문제인지 &lt;code&gt;apt-get install&lt;/code&gt; 이 안 되더라. 아직은 일본 노드를 사용하고 있으므로 일본 저장소를 추가하려 했으나... 안 된다. 한국 저장소 죽었단 소린 언뜻 들었는데, 해보니 일본 저장소도 죽었다;; 우분투 공식 저장소를 추가하도록 하자.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ vim /etc/apt/sources.list&lt;/code&gt; 명령어를 입력해서 아래의 코드를 추가하도록 하자. main 저장소가 여러개 있으면 충돌이 날 가능성이 있으니 조심.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;###### Ubuntu Main Repos&lt;/span&gt;
deb http://archive.ubuntu.com/ubuntu trusty main
deb-src http://archive.ubuntu.com/ubuntu trusty main

&lt;span class="c"&gt;###### Ubuntu Update Repos&lt;/span&gt;
&lt;span class="c"&gt;# Major bug fix updates produced after the final release of the distribution.&lt;/span&gt;
deb http://archive.ubuntu.com/ubuntu trusty-updates main
deb-src http://archive.ubuntu.com/ubuntu trusty-updates main

&lt;span class="c"&gt;## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu&lt;/span&gt;
&lt;span class="c"&gt;## team. Also, please note that software in universe WILL NOT receive any&lt;/span&gt;
&lt;span class="c"&gt;## review or updates from the Ubuntu security team.&lt;/span&gt;
deb http://archive.ubuntu.com/ubuntu trusty universe
deb-src http://archive.ubuntu.com/ubuntu trusty universe
deb http://archive.ubuntu.com/ubuntu trusty-updates universe
deb-src http://archive.ubuntu.com/ubuntu trusty-updates universe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;저장소 목록을 업데이트 했다면 &lt;code&gt;apt-get update&lt;/code&gt; 로 목록을 갱신해주고, 다음 단계를 진행하면 된다.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;우선, 아래와 같은 명령어로 필수 패키지들을 설치하자. &lt;code&gt;-y&lt;/code&gt; 는 패키지마다 설치할 것이냐고 묻는 걸 모두 &lt;code&gt;yes&lt;/code&gt; 처리 해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install build-essential curl git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그 다음, 아래의 명령어를 입력하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;마지막으로,  &lt;code&gt;.bashrc&lt;/code&gt; 혹은 &lt;code&gt;.zshrc&lt;/code&gt; 파일 하단에 아래와 같은 내용을 추가하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# linuxbrew&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.linuxbrew/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;MANPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.linuxbrew/share/man:&lt;/span&gt;&lt;span class="nv"&gt;$MANPATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;INFOPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.linuxbrew/share/info:&lt;/span&gt;&lt;span class="nv"&gt;$INFOPATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;source .zshrc&lt;/code&gt; 로 쉘 설정파일을 다시 불러오자.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;nvm 설치&lt;/h2&gt;
&lt;p&gt;nvm은 node  의 버전관리도구인데, ghost는 node의 0.10.x 버전에서 안정적으로 돌아가기에 버전을 맞춰줄 필요성이 있다. ~~(언제적부터 0.10.x를 계속 권장하는거냐... ghost 재단은 일을 해라!!)~~&lt;/p&gt;
&lt;p&gt;아래와 같이 설치하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install nvm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 &lt;code&gt;.zshrc&lt;/code&gt; 하단에 아래와 같이 추가해주자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# nvm&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;NVM_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.nvm
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;brew --prefix nvm&lt;span class="k"&gt;)&lt;/span&gt;/nvm.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;source .zshrc&lt;/code&gt; 로 쉘 설정파일을 다시 불러오자.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;npm 설치&lt;/h2&gt;
&lt;p&gt;npm은 node의 패키지 관리도구인데, ghost 설치를 위해 필요하다. 2015년 12월 현재 2.5.x 버전을 권장하니 거기에 맞춰주자. ~~(언제적부터 2.5.x를 계속 권장하는거냐... ghost 재단은 일을 해라!!)~~&lt;/p&gt;
&lt;p&gt;아래와 같이 설치하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install npm
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;ghost 설치&lt;/h2&gt;
&lt;p&gt;이제 본격적으로 ghost를 설치하자. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/TryGhost/Ghost"&gt;Ghost 저장소&lt;/a&gt;에 적힌 조언대로, 직접 서비스할 예정이니 가급적 &lt;a href="https://github.com/TryGhost/Ghost/tree/stable"&gt;Stable 버전&lt;/a&gt;을 다운받아 서버에 올려서 설치하자. 지금은 귀찮으니 master 버전을 설치하겠다. 아래와 같이 github에서 ghost 파일을 받아오자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/tryghost/ghost.git ghost
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 &lt;code&gt;$ cd ghost&lt;/code&gt; 로 이동을 해서 grunt를 설치하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm install -g grunt-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 아래와 같이 node 패키지를 설치하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 아래처럼 마무리를 하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grunt init
&lt;span class="nv"&gt;$ &lt;/span&gt;grunt prod
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;ghost 환경 설정&lt;/h3&gt;
&lt;p&gt;config.js를 설정하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cp config.example.js config.js
&lt;span class="nv"&gt;$ &lt;/span&gt;vim config.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;보통 아래에 있는 url만 수정해주어도 된다. 우선은 sqlite3를 사용해보도록 하자. 개인 블로그 정도이니 sqlite3를 사용하여도 무방하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;production&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://my-ghost-blog.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/content/data/ghost.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mariadb 혹은 mysql을 사용할 경우엔 database 부분을 아래와 같이 따로 수정해 주어야 한다. mariadb, mysql을 설치하고, 데이터베이스와 사용자를 생성한 후 아래에 적절히 값을 넣어주면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{블로그-DB-유저}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{DB-비밀번호}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{DB-이름}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;혹시 DB명, DB ID, DB PW가 그대로 노출되는 게 싫다면 쉘 환경변수를 응용하자.&lt;/p&gt;
&lt;p&gt;그리고 nginx의 sites-available에 아래와 같이 추가하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# https://gist.github.com/vvo/7414035&lt;/span&gt;

&lt;span class="c1"&gt;# cache 200 10 minutes, 404 1 minute, others status codes not cached&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;10m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$scheme$host$request_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;client_body_buffer_size&lt;/span&gt; &lt;span class="mi"&gt;128k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# default expires (browser cache) set to 1 minute&lt;/span&gt;
&lt;span class="k"&gt;expires&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# add a cache HIT/MISS header&lt;/span&gt;
&lt;span class="k"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;X-Cache&lt;/span&gt; &lt;span class="nv"&gt;$upstream_cache_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;##################################&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;your.blog.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;#   access_log /var/log/nginx/ghost.log;&lt;/span&gt;

    &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="mi"&gt;20m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/home/blog/ghost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;HOST&lt;/span&gt; &lt;span class="nv"&gt;$http_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-NginX-Proxy&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;proxy_ignore_headers&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set-Cookie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_hide_header&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set-Cookie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://ghost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# add some caching on static assets&lt;/span&gt;
  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;\.(jpg|jpeg|png|gif|ico|css|js|eot|woff)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# ghost sends Cache-Control max-age=0 on CSS/JS for now&lt;/span&gt;
  &lt;span class="c1"&gt;# see https://github.com/TryGhost/Ghost/issues/1405?source=c#issuecomment-28196957&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_ignore_headers&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Cache-Control&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;expires&lt;/span&gt; &lt;span class="s"&gt;10y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://ghost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;ghost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;ip_hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2368&lt;/span&gt; &lt;span class="s"&gt;weight=3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;keepalive&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;2368&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;your.blog.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/ghost.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/home/blog/ghost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;HOST&lt;/span&gt; &lt;span class="nv"&gt;$http_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-NginX-Proxy&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:2368&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$ sudo service nginx reload&lt;/code&gt; 로 nginx 서버 설정을 다시 불러오자.&lt;/p&gt;
&lt;p&gt;그리고 아래와 같은 명령어로 블로그를 실행하면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm start --production
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;명령어 끝이 &amp;amp; 을 붙이면 백그라운드로 돌아간다. 근데 더 안전한 방법은 forever 패키지를 사용하는 것이다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Ghost run forever&lt;/h2&gt;
&lt;p&gt;Ghost를 계속해서 Background Task로 실행시키기 위해서는 forever를 사용하는 것이 좋다. 예기치 않은 오류로 프로세스가 종료되더라도 forever가 좀비처럼 계속 살려준다. ~~(오오 좀비 오오)~~&lt;/p&gt;
&lt;p&gt;설치는 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm install forever -g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;실행은 &lt;code&gt;NODE_ENV=production forever start index.js&lt;/code&gt; 로 하고,&lt;br /&gt;
종료는 &lt;code&gt;forever stop index.js&lt;/code&gt; 로 한다.&lt;br /&gt;
프로세스 확인은 : &lt;code&gt;forever list&lt;/code&gt; 로 하면 된다.&lt;/p&gt;
&lt;p&gt;껏다 킬 때가 많을 땐 자동화 스크립트를 만들어두면 편리하다.&lt;br /&gt;
&lt;code&gt;restart.sh&lt;/code&gt; 파일을 만들어 아래의 코드를 넣자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;forever stop index.js  
&lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production forever start index.js  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그럼 &lt;code&gt;$ ./restart.sh&lt;/code&gt; 만으로 간단히 블로그를 껏다 켤 수 있다. 테마를 개발할 때 자주 사용하게 되더라.&lt;/p&gt;
&lt;p&gt;그리고 &lt;code&gt;/etc/init.d&lt;/code&gt; 에 ghost 라는 파일을 생성하고 아래와 같은 코드를 붙여넣자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;### BEGIN INIT INFO&lt;/span&gt;
&lt;span class="c"&gt;# Provides: blog&lt;/span&gt;
&lt;span class="c"&gt;# Required-Start:&lt;/span&gt;
&lt;span class="c"&gt;# Required-Stop:&lt;/span&gt;
&lt;span class="c"&gt;# Default-Start: 2 3 4 5&lt;/span&gt;
&lt;span class="c"&gt;# Default-Stop: 0 1 6&lt;/span&gt;
&lt;span class="c"&gt;### END INIT INFO&lt;/span&gt;

&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blog&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/blog/ghost/index.js&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/log/ghost/server.log&amp;quot;&lt;/span&gt;

stop&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    sudo su - &lt;span class="nv"&gt;$USER&lt;/span&gt; -c&lt;span class="s2"&gt;&amp;quot;NODE_ENV=production forever stop &lt;/span&gt;&lt;span class="nv"&gt;$APP&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

start&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    sudo su - &lt;span class="nv"&gt;$USER&lt;/span&gt; -c&lt;span class="s2"&gt;&amp;quot;NODE_ENV=production forever start --append -l &lt;/span&gt;&lt;span class="nv"&gt;$LOG&lt;/span&gt;&lt;span class="s2"&gt; -o &lt;/span&gt;&lt;span class="nv"&gt;$LOG&lt;/span&gt;&lt;span class="s2"&gt; -e &lt;/span&gt;&lt;span class="nv"&gt;$LOG&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$APP&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
    start&lt;span class="o"&gt;)&lt;/span&gt;
        stop
        start
        &lt;span class="p"&gt;;;&lt;/span&gt;
    stop&lt;span class="o"&gt;)&lt;/span&gt;
        stop
        &lt;span class="p"&gt;;;&lt;/span&gt;
    restart&lt;span class="o"&gt;)&lt;/span&gt;
        start
        &lt;span class="p"&gt;;;&lt;/span&gt;
    *&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt; {start|stop|restart}&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그럼 서버가 부팅하면 블로그가 백그라운드로 실행된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;작성중입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;참고&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/TryGhost/Ghost"&gt;Github Ghost 저장소&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.ghost.org/deploying-ghost/"&gt;Ghost의 Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ghost.mailgun.com"&gt;Mailgun 코드 생성기&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://sharadchhetri.com/2015/06/08/setup-nginx-as-proxy-to-serve-ghost-blog-on-port-80/"&gt;sharadchhetri 글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zetawiki.com/wiki/리눅스_포트_프로세스_목록_확인"&gt;Zetawiki 글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nuli.navercorp.com/sharing/blog/post/1132682"&gt;NULI Grunt 사용법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.ghost.org/installing-ghost-linux/"&gt;Ghost 도움말&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-host-ghost-with-nginx-on-digitalocean"&gt;Digital Ocean 커뮤니티&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://taking.kr/blog/archives/1051.html"&gt;taking 글&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.ghost.org/ko/installation/"&gt;Ghost 공식 문서&lt;/a&gt;    &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:n"&gt;
&lt;p&gt;Single Board Computer의 약자. 보통 작은 마더보드 하나로 작동하는 작은 컴퓨터를 지칭한다.&amp;#160;&lt;a class="footnote-backref" href="#fnref:n" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="dev"></category><category term="nodejs"></category><category term="ghost"></category><category term="blog"></category><category term="server"></category><category term="package"></category></entry><entry><title>Pelican 설치 가이드</title><link href="http://git.chann.kr/pelican/how-to-install-pelican" rel="alternate"></link><updated>2015-11-21T22:20:00+09:00</updated><author><name>CHANN</name></author><id>tag:git.chann.kr,2015-11-21:pelican/how-to-install-pelican</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;작성중&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CHANN@CHANN-Macbook:~/git/channprj.github.io&lt;span class="o"&gt;(&lt;/span&gt;master○&lt;span class="o"&gt;)&lt;/span&gt; » git config user.name &lt;span class="s2"&gt;&amp;quot;channprj&amp;quot;&lt;/span&gt;
CHANN@CHANN-Macbook:~/git/channprj.github.io&lt;span class="o"&gt;(&lt;/span&gt;master○&lt;span class="o"&gt;)&lt;/span&gt; » git config user.email &lt;span class="s2"&gt;&amp;quot;chann@chann.kr&amp;quot;&lt;/span&gt;
CHANN@CHANN-Macbook:~/git/channprj.github.io&lt;span class="o"&gt;(&lt;/span&gt;master○&lt;span class="o"&gt;)&lt;/span&gt; » pelican-quickstart
Welcome to pelican-quickstart v3.6.3.

This script will &lt;span class="nb"&gt;help &lt;/span&gt;you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What will be the title of this web site? GIT TO GEEK
&amp;gt; Who will be the author of this web site? CHANN
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; ko
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://git.chann.kr
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What is your &lt;span class="nb"&gt;time &lt;/span&gt;zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; Asia/Seoul
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
Done. Your new project is available at /Users/CHANN/git/channprj.github.io
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pelican"></category><category term="tutorial"></category><category term="github"></category></entry><entry><title>Pelican에서 글 쓰는 법</title><link href="http://git.chann.kr/pelican/how-to-write-on-pelican" rel="alternate"></link><updated>2015-11-18T17:27:00+09:00</updated><author><name>CHANN</name></author><id>tag:git.chann.kr,2015-11-18:pelican/how-to-write-on-pelican</id><summary type="html">&lt;p&gt;Pelican에서 글을 쓰는 건 간단하다.&lt;/p&gt;
&lt;h2&gt;작성법&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;├── LICENSE
├── Makefile
├── __pycache__
│   └── pelicanconf.cpython-34.pyc
│
├── content  &lt;span class="c"&gt;# 이 폴더 안에 다음과 같이 xxx.md(마크다운) 파일을 넣자&lt;/span&gt;
│   ├── about.md
│   ├── hello.md
│   └── how-to-write.md
│
├── develop_server.sh
├── fabfile.py
├── pelicanconf.py
├── pelicanconf.pyc
├── publishconf.py
├── publishconf.pyc
│
└── output  &lt;span class="c"&gt;# 이 폴더가 바로 github page에 동기화되어야 할 폴더&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican을 사용할 때 명시해야 할 형식은 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;제목을&lt;/span&gt; &lt;span class="err"&gt;적으면&lt;/span&gt; &lt;span class="err"&gt;된다&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;카테고리를&lt;/span&gt; &lt;span class="err"&gt;적으면&lt;/span&gt; &lt;span class="err"&gt;된다&lt;/span&gt;

&lt;span class="err"&gt;그리고&lt;/span&gt; &lt;span class="err"&gt;여기에&lt;/span&gt; &lt;span class="err"&gt;내용을&lt;/span&gt; &lt;span class="err"&gt;적으면&lt;/span&gt; &lt;span class="err"&gt;된다&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;내용에서의 마크다운 문법은 Git-Flavored Markdown  의 형식을 준수하면 된다.&lt;/p&gt;
&lt;p&gt;파일 제목을 영어로 작성하자. 한글로 작성시 오류가 날 확률이 있다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Github Pages에 업로드하기&lt;/h2&gt;
&lt;p&gt;단순하니 아래의 명령어를 참고하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 펠리칸으로 빌드를 하고&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican content

&lt;span class="c"&gt;# output 폴더로 가서&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output

&lt;span class="c"&gt;# 커밋을 하고 푸시한다&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add .
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;커밋 메시지&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;좀 더 편리한 방법으로 Travis-CI를 연결하여 자동으로 푸시되게 하는 방법이 있는데, 이 부분은 나중에 작성할 예정이다.&lt;/p&gt;
&lt;p&gt;현재 upload.sh 파일을 작성하여 위의 과정을 쉘 스크립트로 자동화시켜놓았다.
Travis와 연동하면 의미없는 짓이긴 하지만... 당장 바로 써먹을 땐 무식하게 돌아가도록 짜는 것도.... 생각보다 그리 나쁘진 않다. (...)&lt;/p&gt;</summary></entry><entry><title>Python, Django 등의 작업환경 설정하기</title><link href="http://git.chann.kr/project/django-python-initial-setting" rel="alternate"></link><updated>2015-10-13T00:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:git.chann.kr,2015-10-13:project/django-python-initial-setting</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;작성중&lt;/p&gt;
&lt;p&gt;이 글은 개인 기록용으로, 다소 불친절할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;OS X에서 Python 설치하기&lt;/h2&gt;
&lt;p&gt;ruby 기반의 패키지관리 툴인 brew를 사용해서 Python을 설치하자.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew update
&lt;span class="nv"&gt;$ &lt;/span&gt;brew doctor
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install python
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo easy_install pip
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install pyenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/yyuu/pyenv"&gt;Github pyenv 저장소&lt;/a&gt; 의 설명을 잘 보고 따라해야 한다. 나는 bash가 아닌 zshell을 사용하므로 &lt;code&gt;.zshrc&lt;/code&gt; 파일을 수정해주었다. 영어로 되어있지만 어려운 내용은 없으니 그냥 시키는대로 하면 된다.  &lt;/p&gt;
&lt;p&gt;제대로 설정이 되었는지 확인해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CHANN@CHANN-Macbook:~ » python
Python 3.4.0 &lt;span class="o"&gt;(&lt;/span&gt;default, Oct &lt;span class="m"&gt;26&lt;/span&gt; 2015, 06:24:28&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC 4.2.1 Compatible Apple LLVM 7.0.0 &lt;span class="o"&gt;(&lt;/span&gt;clang-700.1.76&lt;span class="o"&gt;)]&lt;/span&gt; on darwin
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
CHANN@CHANN-Macbook:~ »
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;python, parser, virtualenv 등 세팅&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install beautifulsoup4
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install lxml
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install requests
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install pyenv-virtualenv
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install autoenv
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Django 설치&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv virtualenv 3.4.2 kusle-3.4.2
&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv shell kusle-3.4.2
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install &lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.8.6
&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject kusle .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그럼 아래와 같은 구조의 폴더가 생성된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;kusle
├── __init__.py
├── settings.py
├── urls.py
└── wsgi.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;wsgi는 웹 서버 게이트웨이 인터페이스(WSGI, Web Server Gateway Interface)는 웹서버와 웹 애플리케이션의 인터페이스를 위한 파이썬 프레임워크다. Low-Level로 작성되어 웹서버와 웹 어플리케션, 프레임워크간의 벽을 허물었다.&lt;/p&gt;
&lt;p&gt;웹 어플리케이션 개발이 목적이므로, 기본적으로는 HTTP의 요청을 받아 응답을 돌려주어야 한다. 이러한 처리는 1차적으로 nginx를 통해 이뤄지는데, uwsgi라는 데몬을 사용하여 서버사이드를 처리할 예정이다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;uwsgi 설치&lt;/h3&gt;
&lt;p&gt;uwsgi의 역할은 아래와 같다.&lt;br /&gt;
client &amp;lt;-&amp;gt; the web server &amp;lt;-&amp;gt; the socket &amp;lt;-&amp;gt; uwsgi &amp;lt;-&amp;gt; Django&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; 를 통해 아래와 같이 &lt;code&gt;uwsgi&lt;/code&gt; 를 설치하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install uwsgi
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir /usr/local/etc/uwsgi/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;근데 &lt;code&gt;uwsgi&lt;/code&gt; 명령어가 자꾸 에러를 뿜는다. 중국 형님들 블로그에서 힌트를 얻어 아래와 같은 방법으로 해결을 했다. linuxbrew를 사용해서 겪는 삽질일지도 모르겠다.&lt;br/&gt;
&lt;code&gt;sudo ln -s /home/사용자/.linuxbrew/lib/libpcre.so.1 /lib&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이후에 다음과 같이 테스트해보자&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uwsgi --http :8000 --module kusle.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그럼 장고 welcome 페이지가 뜰 것이다. 이제 nginx 와 연동을 하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;################# uWSGI configuration #################&lt;/span&gt;

    &lt;span class="nv"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; epoll
    &lt;span class="nv"&gt;ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
    &lt;span class="nv"&gt;plugin_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .
    &lt;span class="nv"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; timerfd
    &lt;span class="nv"&gt;capabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
    &lt;span class="nv"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; embedded
    &lt;span class="nv"&gt;pcre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
    &lt;span class="nv"&gt;filemonitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; inotify
    &lt;span class="nv"&gt;malloc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; libc
    &lt;span class="nv"&gt;zlib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
    &lt;span class="nv"&gt;execinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
    &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
    &lt;span class="nv"&gt;ifaddrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
    &lt;span class="nv"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; expat
    &lt;span class="nv"&gt;routing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
    &lt;span class="nv"&gt;locking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pthread_mutex
    &lt;span class="nv"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Linux
    &lt;span class="nv"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False

    &lt;span class="c"&gt;############## end of uWSGI configuration #############&lt;/span&gt;
    total build &lt;span class="nb"&gt;time&lt;/span&gt;: &lt;span class="m"&gt;24&lt;/span&gt; seconds
    *** uWSGI is ready, launch it with /home/kusle/.pyenv/versions/kusle-3.4.2/bin/uwsgi ***
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# uwsgi.ini&lt;/span&gt;
&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="c1"&gt;# the base directory (full path)&lt;/span&gt;
&lt;span class="na"&gt;base&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/kusle/django&lt;/span&gt;
&lt;span class="na"&gt;project&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;kusle&lt;/span&gt;

&lt;span class="na"&gt;chdir&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)&lt;/span&gt;

&lt;span class="c1"&gt;# the virtualenv (full path)&lt;/span&gt;
&lt;span class="na"&gt;home&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/kusle/.pyenv/versions/kusle-3.4.2&lt;/span&gt;

&lt;span class="c1"&gt;# test...&lt;/span&gt;
&lt;span class="c1"&gt;# projectdomain = kusle.kuple.kr&lt;/span&gt;
&lt;span class="c1"&gt;# protocol = uwsgi&lt;/span&gt;
&lt;span class="c1"&gt;# daemonize = /home/kusle/django/log/kusle.log&lt;/span&gt;

&lt;span class="c1"&gt;# Django&amp;#39;s wsgi file&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;kusle.wsgi&lt;/span&gt;

&lt;span class="c1"&gt;# the socket (use the full path to be safe&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;kusle.sock&lt;/span&gt;

&lt;span class="c1"&gt;######&lt;/span&gt;

&lt;span class="c1"&gt;# process-related settings&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# maximum number of worker processes&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;# ... with appropriate permissions - may be needed&lt;/span&gt;
&lt;span class="c1"&gt;# chmod-socket    = 664&lt;/span&gt;

&lt;span class="c1"&gt;# clear environment on exit&lt;/span&gt;
&lt;span class="c1"&gt;# vacuum          = true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;마스터로 계속 돌아가는 uwsgi를 멈추는 방법은 &lt;code&gt;killall -s INT uwsgi&lt;/code&gt;명령어를 사용하면 된다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;자동으로 uWSGI 실행되도록 설정&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;description &amp;quot;uWSGI server instance configured to serve my project&amp;quot;

start on runlevel [2345]
stop on runlevel [!2345]

setuid kusle
setgid www-data

env PATH=/home/kusle/django/myprojectenv/bin
chdir /home/kusle/django
exec uwsgi --http :8000 kusle.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;MariaDB 설정&lt;/h2&gt;
&lt;p&gt;Django는 기본설정으로 Sqlite3를 사용한다. 하지만 이번 프로젝트에서는 새롭게 DB를 구축하는 것 이외에 기존의 DB를 활용하는 방안도 고려중이므로, 되도록이면 같은 DB를 사용하는 것이 나을 것 같다는 판단을 하였다.&lt;/p&gt;
&lt;p&gt;먼저, DB를 새롭게 생성하자. 먼저, &lt;code&gt;$ mysql -u root -p&lt;/code&gt;를 통해 mariadb 콘솔로 접속한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt; &lt;span class="n"&gt;identified&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{비밀번호}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;grant&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="k"&gt;privileges&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt; &lt;span class="k"&gt;privileges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;settings.py에 그대로 드러나는 DB명, 아이디, 암호를 감추어야 하는데, 이것은 쉘 변수를 활용하면 된다. settings.py는 &lt;code&gt;import os&lt;/code&gt;를 하므로 쉘 변수를 그대로 불러올 수 있다.&lt;/p&gt;
&lt;p&gt;.bashrc 또는 .zshrc 등의 쉘 환경설정 파일에 다음과 같이 추가한다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DB_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DB이름&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DB_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DB 계정 아이디&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DB_PW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DB 계정 암호&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 settings.py의 DB 관련 코드를 아래와 같이 수정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DB_NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DB_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DB_PW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;설치를 완료했으면 DB 연동이 제대로 되었는지 테스트를 해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;최종 트리&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;django
├── 3.4.2
│   ├── bin
│   ├── lib
│   └── &lt;span class="nb"&gt;local&lt;/span&gt;
├── 404.htm
├── 50x.htm
├── db-parsing
│   ├── bs4_test2.py
│   ├── bs4_test3.py
│   └── bs4_test.py
├── index.html
├── kusle
│   ├── __init__.py
│   ├── __pycache__
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
│   └── wsgi.py.original
├── kusle.sock
├── log
│   └── kusle.log
├── manage.py
├── README.md
├── requirements.txt
├── static
│   └── admin
├── test.py
├── uwsgi.ini
└── versions
    ├── bin
    ├── lib
    └── &lt;span class="nb"&gt;local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;참고&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applications-using-uwsgi-web-server-with-nginx"&gt;Digital Ocean의 uWSGI, Nginx 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ko.wikipedia.org/wiki/웹_서버_게이트웨이_인터페이스"&gt;위키피디아 wsgi 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codingdojang.com/scode/364"&gt;코딩도장의 uwsgi 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html"&gt;uWSGI Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://link2me.tistory.com/431"&gt;link2me님 블로그의 DB 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/databases/"&gt;Django DB 관련 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-mysql-or-mariadb-with-your-django-application-on-ubuntu-14-04"&gt;Digital Ocean의 MariaDB, Django 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://knot.tistory.com/97"&gt;용이님 블로그의 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/Install.html"&gt;uwsgi 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codingdojang.com/scode/373"&gt;코딩도장의 django 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://software-engineer.gatsbylee.com/uwsgi란-무엇인가-어떻게-사용해야-하는가/"&gt;gatsby님 블로그의 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tutorial.djangogirls.org/ko/django_models/index.html"&gt;djangogirls 홈페이지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.hannal.com"&gt;hannal님 블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="ku"></category><category term="django"></category><category term="python"></category><category term="init"></category></entry><entry><title>강의 편람 DB 파싱</title><link href="http://git.chann.kr/project/ku-lecture-db-parsing" rel="alternate"></link><updated>2015-10-08T00:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:git.chann.kr,2015-10-08:project/ku-lecture-db-parsing</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;작성중&lt;/p&gt;
&lt;p&gt;이 글은 개인 기록용으로, 다소 불친절할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;강의평가 시스템을 구축하기 전에, 먼저 강의 편람 정보를 가지고 있어야 한다.&lt;br /&gt;
고려대는 강의편람을 xml 등의 형식으로 따로 제공하지 않으므로, html 파싱을 해서 추출해야 한다.&lt;br /&gt;
추출하기 전에 앞서 소스 URL을 찾아내야만 했다.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://sugang.korea.ac.kr&lt;/code&gt; 의 코드를 면밀히 분석한 결과, 아래의 URL을 찾아낼 수 있었다.&lt;br /&gt;
아래의 주소를 통해 수강 편람을 파싱받아 DB에 뼈대를 저장해 두면 될 것 같다.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://infodepot.korea.ac.kr/lecture/LecMajorSub.jsp?yy=2010&amp;amp;tm=1R&amp;amp;col=4460&amp;amp;dept=4548&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;아래의 코드를 참고하여 GET으로 값을 전달하면 쉽게 HTML 파싱을 할 수 있다.&lt;br /&gt;
각 변수별 값은 &lt;code&gt;html&lt;/code&gt;과 &lt;code&gt;js&lt;/code&gt;를 통해 추출 가능하다.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yy&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2015&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;selected=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2015년&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2014&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2014년&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tm&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1R&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1학기&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1S&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;여름학기&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;selected=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2R&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2학기&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2W&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;겨울학기&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SC&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;국제하계대학&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;changeCol(frm_ms, this, frm_ms.dept);&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;selected=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0137&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color:black&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;법과대학&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0140&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color:black&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;경영대학&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0143&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color:black&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;문과대학&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4652&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color:black&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;생명과학대학  &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4460&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color:black&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;과학기술대학&lt;span class="nt"&gt;&amp;lt;/optin&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dept&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4548&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: black;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;컴퓨터정보학과 &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4549&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: black;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;정보통계학과   &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4550&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: black;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;전자및정보공학부 &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parser는 &lt;code&gt;Python&lt;/code&gt;의 &lt;code&gt;Beautiful Soup&lt;/code&gt; 라이브러리를 사용하면 편리할 것 같다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Making the soup&lt;/h3&gt;
&lt;p&gt;아래의 코드는 링크를 모두 가져오는 bs4 예제다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://kuple.kr/free&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lxml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;참고&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://zevross.com/blog/2014/05/16/using-the-python-library-beautifulsoup-to-extract-data-from-a-webpage-applied-to-world-cup-rankings/"&gt;zevross의 블로그 글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidocs.net/book/1"&gt;점프 투 파이썬&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="ku"></category><category term="db"></category><category term="parsing"></category><category term="python"></category></entry><entry><title>Not Found</title><link href="http://git.chann.kr/misc/404" rel="alternate"></link><updated>0404-04-04T04:04:00+08:28</updated><author><name>CHANN</name></author><id>tag:git.chann.kr,0404-04-04:misc/404</id><summary type="html">&lt;p&gt;글을 찾을 수 없습니다. &lt;a href="/archives"&gt;아카이브&lt;/a&gt;를 확인해주세요.&lt;/p&gt;
&lt;p&gt;문제점에 대해 &lt;a href="http://twitter.com/chann_kr"&gt;@chann_kr&lt;/a&gt;로 멘션해 주시면 고맙게 받겠습니다. :-)&lt;/p&gt;</summary></entry></feed>